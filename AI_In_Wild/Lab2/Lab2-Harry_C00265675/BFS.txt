def breadthFirstSearch(problem):
    """Search the shallowest nodes in the search tree first."""
    print("Start:", problem.getStartState())
    print("Is the start a goal?", problem.isGoalState(problem.getStartState()))
    print("Start's successors:", problem.getSuccessors(problem.getStartState()))

    queue = util.Queue()
    queue.push((problem.getStartState(), []))
    print("Start queue:", queue.list)

    visited = list()

    while not queue.isEmpty():
        currentState, steps = queue.pop()
        if currentState not in visited:
            if problem.isGoalState(currentState):
                return steps

            visited.append(currentState)
            for state, action, cost in problem.getSuccessors(currentState):
                if state not in visited:
                    queue.push((state, steps + [action]))

    return []