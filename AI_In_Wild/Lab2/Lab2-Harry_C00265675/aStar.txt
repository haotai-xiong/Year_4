def aStarSearch(problem, heuristic=nullHeuristic):
    """Search the node that has the lowest combined cost and heuristic first."""
    
    print("Start:", problem.getStartState())
    print("Is the start a goal?", problem.isGoalState(problem.getStartState()))
    print("Start's successors:", problem.getSuccessors(problem.getStartState()))

    priorityQueue = util.PriorityQueue()
    startState = problem.getStartState()
    priorityQueue.push((startState, [], 0), 0)

    visited = list()

    while not priorityQueue.isEmpty():
        currentState, steps, currentCost = priorityQueue.pop()
        if currentState not in visited:
            if problem.isGoalState(currentState):
                return steps
            
            visited.append(currentState)

            for nextState, action, cost in problem.getSuccessors(currentState):
                if nextState not in visited:
                    newCost = currentCost + cost
                    priority = newCost + heuristic(nextState, problem)
                    priorityQueue.push((nextState, steps + [action], newCost), priority)

    return []